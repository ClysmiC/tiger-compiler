Step 1: remove order-of-operation ambiguity

<expr> ->   <expr> | <term1>
            <term1>

<term1> ->  <term1> & <term2>
            <term2>

<term2> ->  <term2> <inequality-op> <term3>
            <term3>

<term3> ->  <term3> <equality-op> <term4>
            <term4>

<term4> ->  <term4> <add-sub-op> <term5>
            <term5>

<term5> ->  <term5> <mul-div-op> <factor>
            <factor>

<factor> -> (<expr>)
            id
            <const>
            <lvalue>

<inequality-op> ->  <
                    >
                    <=
                    >=

<equality-op> ->    =
                    <>

<add-sub-op> -> +
                -

<mul-div-op> -> *
                /


Step 2: modify grammar to support LL(1) parsing (remove left-recursion
and do left-factoring).

REMOVING LEFT-RECURSION

<expr> ->   <term1> <exprPrime>

<exprPrime> ->  | <term1> <exprPrime>
                NULL

<term1> ->  <term2> <term1Prime>

<term1Prime> -> & <term2> <term1Prime>
                NULL


<term2> ->  <term3> <term2Prime>

<term2Prime> -> <inequality-op> <term2Prime>
                NULL

<term3> ->  <term4> <term3Prime>

<term3Prime> -> <equality-op> <term3Prime>
                NULL

<term4> ->  <term5> <term4Prime>

<term4Prime> -> <add-sub-op> <term4Prime>
                NULL

<term5> -> <factor> <term5Prime>

<term5Prime -> <mul-div-op> <term5Prime>

<factor> -> (<expr>)
            id
            <const>
            <lvalue>




LEFT-FACTORING

<id-list> -> id <id-list-cont>

<id-list-cont> -> , id <id-list-cont>
<id-list-cont> -> NULL



<stat-seq> -> <stat> <stat-seq-cont>

<stat-seq-cont> ->  <stat-seq>
                    NULL

<stat> -> <if-stat> <if-end> ;

<if-stat> -> if <expr> then <stat-seq>

<if-end> -> endif
            else <stat-seq> endif