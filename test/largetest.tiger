let
		type ArrayInt = array[2] of int;
        type Float1 = float;
        type Float2 = Float1;

        /*var x : int := 0;*/
        var y : int := 2;
        var z : int := 0;
        var loopCounter : int;

        var f1 : Float1 := 5;
        var f2 : Float1 := 1.3;
        /*var f2 : Float2 := 3.5;*/

        var afloat : float;

        var buffer : ArrayInt := 8;

        function fillArray( int1 : int, int1 : int) : ArrayInt
        begin
        	/* 	
        		Can assign base type to indices of array
        		Can only assign actual type to an unindexed variable.
        	*/
        	buffer[0] := int1;
        	buffer[1] := int2;
        	buffer := buffer;

        	return buffer;
        end;

        function fillArrayNoRetVal( int3 : int, int4: int)
        begin
        	buffer[0] := int1;
        	buffer[1] := int2;

        	/*
        		Unable to just type "return;" ...
        		return must be followed by expression (according to grammar).
        		Thus, void functions semantically can't have a return token.
        	*/
        end;

        function areIntsEqual ( n : int , n2 : int) : int
        begin
            return n = n2;
        end;

        function areFloatsEqual( n : float, n2 : float) : int
        begin
        	return n = n2;
        end;
in
		for loopCounter := (0.5 = 0.1) to 10 + 5
		do
			z := z + 1;

			if(z > 0)
			then
				break;
			endif;

		enddo;

        j := 3;

        f := k + z - randomLetters;

        z := y + y;
end
