let
		type ArrayInt = array[2] of int;

        /*var x : int := 0;*/
        var y : int := 0;
        var z : int := 0;

        var buffer : ArrayInt;

        function fillArray( int1 : int, int2 : int) : ArrayInt
        begin
        	/* 	
        		Can assign base type to indices of array
        		Can only assign actual type to an unindexed variable.
        	*/
        	buffer[0] := int1;
        	buffer[1] := int2;
        	buffer := buffer;

        	return buffer;
        end;

        function fillArrayNoRetVal( int1 : int, int2: int)
        begin
        	buffer[0] := int1;
        	buffer[1] := int2;

        	/*
        		Unable to just type "return;" ...
        		return must be followed by expression (according to grammar).
        		Thus, void functions semantically can't have a return token.
        	*/
        end;

        function areIntsEqual ( n : int , n2 : int) : int
        begin
            return n = n2;
        end;

        function areFloatsEqual( n : float, n2 : float) : int
        begin
        	return n = n2;
        end;
in
        z := y + y;
end
